package at.searles.fractal;


import java.util.List;

import at.searles.fractal.data.FractalData;
import at.searles.fractal.data.ParameterType;
import at.searles.fractal.data.Parameters;
import at.searles.math.Scale;
import at.searles.math.color.Palette;
import at.searles.meelan.compiler.Ast;
import at.searles.meelan.compiler.IntCode;
import at.searles.meelan.symbols.ExternData;

/*
 * When parsing, an instance of ExternData is created.
 * Additionally, there is a Map of custom parameters.
 *
 * So, ExternData gets a list of parameters, with
 * a type and a default  The order must
 * be preserved.
 *
 * Parameter also contains data type. Order of parameters
 * is of no importance.
 *
 * LinkedHashMap<String, ExternElement>
 */

public class Fractal {

    private static final String SOURCE_LABEL = "source";
    private static final String DATA_LABEL = "data";

    /**
     * data contains a label Scale that contains the scale of the fractal.
     */
    public static final String SCALE_KEY = "Scale";

    /**
     * Scale to fall back if there is no other scale defined.
     */ 
    public static final Scale DEFAULT_SCALE = new Scale(2, 0, 0, 2, 0, 0);

    /**
     * Source code of the program.
     */
    private final String sourceCode;

    /**
     * Default data in the order in which they are added.
     * This map is created when the source code is parsed.
     */
    private final FractalExternData data;

    /**
     * Abstract Syntax Tree
     */
    private Ast ast;

    /**
     * Byte code, generated by compile method
     */
    private int[] code = null;

    public static Fractal fromData(FractalData spec) {
        return fromData(spec.source, spec.data);
    }

    public static Fractal fromData(String source, Parameters parameters) {
        Ast ast = ParserInstance.get().parseSource(source);

        FractalExternData data = FractalExternData.fromParameters(parameters);
        return new Fractal(source, ast, data);
    }

    /**
     * Simple constructor
     */
    private Fractal(String sourceCode, Ast ast, FractalExternData parameters) {
        if(sourceCode == null || parameters == null || ast == null) {
            throw new NullPointerException();
        }

        this.sourceCode = sourceCode;
        this.ast = ast;
        this.data = parameters;
    }

    public void compile() {
        IntCode code = ast.compile(FractviewInstructionSet.get(), data);
        this.code = code.createIntCode();
    }

    public FractalExternData data() {
        return data;
    }

    // ======== Some convenience methods to obtain data ========
    
    public Scale scale() {
        return (Scale) data.value(SCALE_KEY);
    }

    /**
     * Since palettes must be transferred directly to the script, convenience method
     * to collect all palettes
     */
    public List<Palette> palettes() {
        return data.filterByType(ParameterType.Palette);
    }

    public List<Scale> scales() {
        return data.filterByType(ParameterType.Scale);
    }

    public String sourceCode() {
        return sourceCode;
    }

    public int[] code() {
        return code;
    }
}
